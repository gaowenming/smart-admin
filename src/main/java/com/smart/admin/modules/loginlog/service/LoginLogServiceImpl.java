package com.smart.admin.modules.loginlog.service;import java.io.Serializable;import java.util.HashMap;import java.util.List;import java.util.Map;import org.apache.commons.lang3.StringUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import com.smart.admin.core.page.Page;import com.smart.admin.core.page.Sorter;import com.smart.admin.modules.loginlog.bean.LoginLog;import com.smart.admin.modules.loginlog.mapper.LoginLogMapper;/** * <p> * </p> * generate time:2014-12-13 21:20:26 *  */@Service(value = "loginLogService")public class LoginLogServiceImpl implements ILoginLogService {	@Autowired	private LoginLogMapper loginLogMapper;	@Override	public List<LoginLog> findByPage(LoginLog loginLog, Sorter sorter, Page page) throws Exception {		Map<String, Object> map = new HashMap<String, Object>();		if (sorter == null || StringUtils.isEmpty(sorter.getSortName())) {			sorter = new Sorter();			sorter.setSortName("id");			sorter.setSortType("DESC");		}		page.setPageSize(20);		map.put("username", loginLog.getUsername());		map.put("start", page.getRecordStartIndex());		map.put("pageSize", page.getPageSize());		map.put("sortField", sorter.getSortName());		map.put("sortType", sorter.getSortType());		int count = loginLogMapper.count(map);		page.setTotal(count);		return loginLogMapper.findPageList(map);	}	@Override	public void update(LoginLog loginLog) throws Exception {		loginLogMapper.update(loginLog);	}	@Override	public void save(LoginLog loginLog) throws Exception {		loginLogMapper.save(loginLog);	}	@Override	public LoginLog get(Serializable id) throws Exception {		LoginLog loginLog = loginLogMapper.get(id);		return loginLog;	}	@Override	public void deleteBatch(Serializable... ids) throws Exception {		loginLogMapper.deleteBatch(ids);	}	@Override	public void delete(Serializable id) throws Exception {		loginLogMapper.delete(id);	}	@Override	public List<LoginLog> findAllList() throws Exception {		return (List<LoginLog>) loginLogMapper.findAllList();	}}